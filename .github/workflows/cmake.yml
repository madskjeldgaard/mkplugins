on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
    - uses: actions/checkout@v2
    
    - name: Install 7Zip (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose

    - name: Get SC source code
      run: git clone https://github.com/supercollider/supercollider.git ${{github.workspace}}/supercollider

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}/supercollider -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{github.workspace}}\build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}\supercollider -DCMAKE_INSTALL_PREFIX=${{github.workspace}}\build\install

    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config "Release" --target install

    - name: Build (Windows)
      working-directory: ${{github.workspace}}\build
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: cmake --build . --config "Release" --target install

      # Gather all files in a zip
    - name: Zip up build (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: zip -r MKPlugins-${{runner.os}} install/MKPlugins
      
      # Gather all files in a zip
    - name: Zip up build (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{github.workspace}}\build
      run: Compress-7Zip "install\MKPlugins" -ArchiveFileName "MKPlugins-${{runner.os}}.zip" -Format Zip

    - uses: mukunku/tag-exists-action@v1.0.0
      id: checkTag
      with: 
        tag: ${{ github.ref}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: echo ${{ steps.checkTag.outputs.exists }}

      # Publish build
    - name: Create Release
      if: !${{ steps.checkTag.outputs.exists }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: MKPlugins-${{ github.ref }}
        draft: false
        prerelease: false
          
    # - name: Upload Release Asset (Unix)
      # id: upload-release-asset-unix 
      # if: matrix.os != 'windows-latest'
      # uses: actions/upload-release-asset@v1
      # env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # with:
        # upload_url: ${{ steps.create_release.outputs.upload_url }} 
        # # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        # asset_path: ${{github.workspace}}/build/MKPlugins-${{runner.os}}.zip
        # asset_name: MKPlugins-${{runner.os}}.zip
        # asset_content_type: application/zip

    # - name: Upload Release Asset (Windows)
      # id: upload-release-asset-windows 
      # if: matrix.os == 'windows-latest'
      # uses: actions/upload-release-asset@v1
      # env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # with:
        # upload_url: ${{ steps.create_release.outputs.upload_url }} 
        # asset_path: ${{github.workspace}}\build\MKPlugins-${{runner.os}}.zip
        # asset_name: MKPlugins-${{runner.os}}.zip
        # asset_content_type: application/zip

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/MKPlugins-${{runner.os}}.zip
        asset_name: MKPlugins-${{runner.os}}.zip
        tag: ${{ github.ref }}
